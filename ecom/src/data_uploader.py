#src.data_uploader.py

import pandas as pd
from sqlalchemy import text
from sqlalchemy.exc import ProgrammingError
from tqdm import tqdm
import time
from typing import Dict, List

from src.db_utils import get_engine  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ—Ç –º–æ–¥—É–ª—å —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
engine = get_engine()

def table_has_data(table_name: str, engine) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã–µ"""
    query = f"SELECT COUNT(*) FROM {table_name}"
    try:
        with engine.connect() as conn:
            result = conn.execute(text(query))
            return result.scalar() > 0
    except ProgrammingError:
        return False

def upload_data_to_db(df_dict: Dict[str, pd.DataFrame], engine) -> None:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ë–î —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    
    Args:
        df_dict: –°–ª–æ–≤–∞—Ä—å {–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ç–∞–±–ª–∏—Ü—ã: DataFrame}
        engine: SQLAlchemy engine
    """
    for table_name, df in df_dict.items():
        if table_has_data(table_name, engine):
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {table_name} ‚Äî —Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ")
            continue

        print(f"‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º: {table_name}")
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
            total_chunks = len(df) // 1000 + 1
            
            with tqdm(total=total_chunks, desc=f"–ó–∞–≥—Ä—É–∑–∫–∞ {table_name}") as pbar:
                for chunk_start in range(0, len(df), 1000):
                    chunk = df.iloc[chunk_start:chunk_start + 1000]
                    chunk.to_sql(
                        table_name,
                        con=engine,
                        if_exists='append',
                        index=False,
                        chunksize=1000,
                        method='multi'
                    )
                    pbar.update(1)
            
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {table_name}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {table_name}: {e}")
            print("‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)
            
            try:
                with tqdm(total=total_chunks, desc=f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ {table_name}") as pbar:
                    for chunk_start in range(0, len(df), 1000):
                        chunk = df.iloc[chunk_start:chunk_start + 1000]
                        chunk.to_sql(
                            table_name,
                            con=engine,
                            if_exists='append',
                            index=False,
                            chunksize=1000,
                            method='multi'
                        )
                        pbar.update(1)
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ: {table_name}")
            except Exception as e:
                print(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ {table_name}: {e}")

def run_pipeline(df_dict: Dict[str, pd.DataFrame], engine) -> None:
    """–û—Å–Ω–æ–≤–Ω–æ–π –ø–∞–π–ø–ª–∞–π–Ω –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("üìå –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
    upload_data_to_db(df_dict, engine)
    print("üèÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    from sqlalchemy import create_engine
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏)
    test_data = {
        "test_table": pd.DataFrame({
            "id": [1, 2, 3],
            "name": ["–ê–ª–µ–∫—Å–µ–π", "–ú–∞—Ä–∏—è", "–ò–≤–∞–Ω"]
        })
    }
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    engine = create_engine("postgresql://user:password@localhost/dbname")
    
    # –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞
    run_pipeline(test_data, engine)