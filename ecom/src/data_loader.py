#src.data_loader.py


import os
import pandas as pd
import re


def to_snake_case(name):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —Å—Ç–∏–ª—å snake_case.

    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã –≤ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –≤—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è 
    –º–µ–∂–¥—É –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –∏ —Å—Ç—Ä–æ—á–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏.

    Args:
        name (str): –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è.

    Returns:
        str: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ snake_case.
    """
    name = re.sub(r'[\s\-]+', '_', name)
    name = re.sub(r'(?<=[a-z])(?=[A-Z])', '_', name)
    return name.lower()


def convert_dates(df):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç–æ–ª–±—Ü—ã —Å –¥–∞—Ç–æ–π –≤ —Ç–∏–ø datetime.

    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ 'date' –∏–ª–∏ 'datetime' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏, –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç pandas datetime.

    Args:
        df (pandas.DataFrame): –î–∞—Ç–∞—Ñ—Ä–µ–π–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.

    Returns:
        pandas.DataFrame: –î–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏.
    """
    date_cols = [col for col in df.columns if 'date' in col or 'datetime' in col]
    for col in date_cols:
        df[col] = pd.to_datetime(df[col], errors='coerce')
    return df


def load_and_inspect(folder_path='datasets', verbose=True):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç CSV —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑.

    –û—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è:
    - –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ snake_case.
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å –¥–∞—Ç–∞–º–∏.
    - –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∏ –∏ –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∞.
    - –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.
    - –ü–æ–∏—Å–∫ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞.

    Args:
        folder_path (str, optional): –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å CSV —Ñ–∞–π–ª–∞–º–∏. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 'datasets'.
        verbose (bool, optional): –ï—Å–ª–∏ True, –≤—ã–≤–æ–¥–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é True.

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞–º–∏, –≥–¥–µ –∫–ª—é—á–∏ - –∏–º–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü, –∞ –∑–Ω–∞—á–µ–Ω–∏—è - –¥–∞—Ç–∞—Ñ—Ä–µ–π–º—ã.
    """
    if not os.path.exists(folder_path):
        print(f"‚ö†Ô∏è –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å {folder_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return {}

    csv_files = [file for file in os.listdir(folder_path) if file.endswith('.csv')]
    if not csv_files:
        print(f"‚ö†Ô∏è –í –ø–∞–ø–∫–µ {folder_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ CSV.")
        return {}

    datasets = {}
    tables_with_missing = {}
    missing_report = {}

    for file in csv_files:
        table_name = file.replace('.csv', '')
        if verbose:
            print(f'\nüì¶ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è: {file} ‚Üí `{table_name}`')

        path = os.path.join(folder_path, file)
        df = pd.read_csv(path)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –¥–∞—Ç—ã
        df.columns = [to_snake_case(col) for col in df.columns]
        df = convert_dates(df)

        if verbose:
            print(f'‚û°Ô∏è –†–∞–∑–º–µ—Ä: {df.shape[0]} —Å—Ç—Ä–æ–∫ √ó {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫')
            print(f'üîÅ –ü–æ–ª–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {df.duplicated().sum()}')

        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        initial_shape = df.shape
        df = df.drop_duplicates()
        removed_duplicates = initial_shape[0] - df.shape[0]
        if removed_duplicates > 0:
            print(f'‚ùå –£–¥–∞–ª–µ–Ω–æ {removed_duplicates} –ø–æ–ª–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤')

        # –ü—Ä–æ–ø—É—Å–∫–∏
        na_percent = df.isna().mean() * 100
        na_present = na_percent[na_percent > 0].sort_values(ascending=False)

        if not na_present.empty:
            tables_with_missing[table_name] = list(na_present.index)
            missing_report[table_name] = na_present
            if verbose:
                print('‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∏ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö (%)')
                print(na_present.round(2).to_string())
        else:
            if verbose:
                print('‚úÖ –ü—Ä–æ–ø—É—Å–∫–æ–≤ –Ω–µ—Ç')

        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        date_cols = [col for col in df.columns if 'date' in col or 'datetime' in col]
        text_cols = [col for col in df.select_dtypes(include='object').columns if col not in date_cols]
        numeric_cols = df.select_dtypes(include='number').columns.tolist()

        if verbose:
            print(f'üìÖ –î–∞—Ç–∞-–ø—Ä–∏–∑–Ω–∞–∫–∏: {date_cols}')
            print(f'üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ: {text_cols[:3]}{" ..." if len(text_cols) > 3 else ""}')
            print(f'üî¢ –ß–∏—Å–ª–æ–≤—ã–µ: {numeric_cols[:3]}{" ..." if len(numeric_cols) > 3 else ""}')

        # –ü–æ–∏—Å–∫ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
        primary_keys = [col for col in df.columns if df[col].is_unique and df[col].notna().all()]
        if primary_keys:
            pk = primary_keys[0]
            dupes_by_pk = df.duplicated(subset=[pk]).sum()

            if verbose:
                print(f'üîë –í–æ–∑–º–æ–∂–Ω—ã–π –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á: {pk}')

            if dupes_by_pk > 0:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã, —É–¥–∞–ª—è–µ–º –∏—Ö
                if verbose:
                    print(f'‚ö†Ô∏è –ù–µ—è–≤–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ `{pk}`: {dupes_by_pk}')
                df = df.drop_duplicates(subset=[pk])

                if verbose:
                    print(f'‚úÖ –£–¥–∞–ª–µ–Ω–æ {dupes_by_pk} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –∫–ª—é—á—É `{pk}`')
            else:
                if verbose:
                    print(f'‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –∫–ª—é—á—É `{pk}` –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ.') 

        print("=" * 125) 
        datasets[table_name] = df

    print("\n‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞—Ç–∞—Ñ—Ä–µ–π–º—ã:")
    for name in datasets:
        print(f' {name}')

    if tables_with_missing:
        print("\n‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—ã —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏:")
        for name, cols in tables_with_missing.items():
            print(f' {name}: {", ".join(cols)}')
    else:
        print("\n‚úÖ –ü—Ä–æ–ø—É—Å–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –≤ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ.")

    return datasets
