# src.numeric_features.py

from scipy import stats
from scipy.stats import shapiro
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from tabulate import tabulate
from IPython.display import display, Markdown

def pretty_print(df, tablefmt='simple'):
    print(tabulate(df, headers='keys', tablefmt=tablefmt, showindex=False, ))


def analyze_numeric_features(df_dict, distributions=None, max_sample=5000, bins=30, exclude=None):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ DataFrame –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è DataFrame

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        df_dict: –°–ª–æ–≤–∞—Ä—å {–∏–º—è_—Ç–∞–±–ª–∏—Ü—ã: DataFrame}
        distributions: –°–ø–∏—Å–æ–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        max_sample: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        bins: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–Ω–æ–≤ –¥–ª—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º
        exclude: –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è  

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        –°–ª–æ–≤–∞—Ä—å {–∏–º—è_—Ç–∞–±–ª–∏—Ü—ã: DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞}
    """
    if distributions is None:
        distributions = ['norm', 'expon', 'lognorm', 'gamma', 'beta', 'uniform']
    if exclude is None:
        exclude = []

    results = {}

    for df_name, df in df_dict.items():
        if df_name in exclude:
            continue

        numeric_cols = df.select_dtypes(include='number').columns
        if numeric_cols.empty:
            print(f"\n{'='*125}\n\n{df_name}: –ù–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n")
            continue

        print(f"\n{'='*125}\n\n–ê–Ω–∞–ª–∏–∑ —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ: {df_name.upper()}")

        report_rows = []

        for col in numeric_cols:
            data = df[col].dropna()
            data = data[np.isfinite(data)]
            data = data.astype(float)

            if len(data) > max_sample:
                data = data.sample(max_sample, random_state=42)

            skewness = stats.skew(data)
            kurt = stats.kurtosis(data)
            q1, q3 = np.percentile(data, [25, 75])
            iqr = q3 - q1
            lower = q1 - 1.5 * iqr
            upper = q3 + 1.5 * iqr
            outliers = ((data < lower) | (data > upper)).sum()
            mean = np.mean(data)
            median = np.median(data)

            comments = []

            # –¢–µ—Å—Ç –®–∞–ø–∏—Ä–æ
            try:
                p_value = shapiro(data)[1]
                if p_value > 0.05:
                    comments.append("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ (p > 0.05).")
                else:
                    comments.append("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ (p ‚â§ 0.05).")
            except Exception:
                comments.append("Shapiro-Wilk –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º (—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö).")

            if outliers / len(data) > 0.05:
                comments.append(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–Ω–æ–≥–æ –≤—ã–±—Ä–æ—Å–æ–≤: {outliers} ({100 * outliers / len(data):.1f}%).")
            else:
                comments.append(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–æ—Å–æ–≤ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ: {outliers}.")

            if abs(skewness) > 1:
                comments.append(f"–°–∏–ª—å–Ω–∞—è —Å–∫–æ—à–µ–Ω–Ω–æ—Å—Ç—å (skew = {skewness:.2f}).")
            elif abs(skewness) > 0.5:
                comments.append(f"–£–º–µ—Ä–µ–Ω–Ω–∞—è —Å–∫–æ—à–µ–Ω–Ω–æ—Å—Ç—å (skew = {skewness:.2f}).")
            else:
                comments.append(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ (skew = {skewness:.2f}).")

            # –ü–æ–¥–±–æ—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            best_fit, best_sse, best_params = None, np.inf, None
            hist, bin_edges = np.histogram(data, bins=bins, density=True)
            x = np.linspace(data.min(), data.max(), 100)

            for dist_name in distributions:
                dist = getattr(stats, dist_name)
                try:
                    params = dist.fit(data)
                    pdf = dist.pdf(bin_edges[:-1], *params)
                    sse = np.sum((hist - pdf) ** 2)
                    if sse < best_sse:
                        best_fit, best_params, best_sse = dist_name, params, sse
                except Exception:
                    continue

            if best_fit:
                comments.append(f"–ù–∞–∏–ª—É—á—à–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ú–ú–ü: {best_fit}.")

            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
            plt.figure(figsize=(12, 2.5))
            sns.histplot(data, bins=bins, stat='density', color='lightgray')
            try:
                dist = getattr(stats, best_fit)
                plt.plot(x, dist.pdf(x, *best_params), label=f'Fit: {best_fit}', color='#f0a028')
            except Exception:
                pass

            try:
                kde = stats.gaussian_kde(data)
                x_kde = np.linspace(data.min(), data.max(), 100)
                plt.plot(x_kde, kde(x_kde), color='#1f57ef', label='KDE')
            except Exception as e:
                comments.append(f"KDE plot –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω: {e}")

            plt.axvline(x=mean, color='black', linestyle='--', label=f'Mean: {mean:.2f}')
            plt.title(f"{col}")
            plt.xlabel('')
            plt.legend(frameon=False)
            plt.grid(True)
            plt.tight_layout()
            plt.show()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–∞
            report_rows.append({
                "–ü—Ä–∏–∑–Ω–∞–∫": col,
                "–°—Ä–µ–¥–Ω–µ–µ": mean,
                "–ú–µ–¥–∏–∞–Ω–∞": median,
                "–°–∫–æ—à–µ–Ω–Ω–æ—Å—Ç—å": skewness,
               # "–≠–∫—Å—Ü–µ—Å—Å": kurt,
                "–í—ã–±—Ä–æ—Å—ã": outliers,
               # "–í—ã–±—Ä–æ—Å—ã %": f"{100 * outliers / len(data):.1f}%",
               # "–õ—É—á—à–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ": best_fit,
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏": "\n".join(comments)
            })

        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ç–∞–±–ª–∏—Ü—ã
        report_df = pd.DataFrame(report_rows)
        results[df_name] = report_df
        pretty_print(results[df_name])
    print("\nüèÅ –ê–Ω–∞–ª–∏–∑ —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    return results
