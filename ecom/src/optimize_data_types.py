# src.optimize_data_types
import pandas as pd
from tabulate import tabulate

def optimize_data_type(dfs: dict, dtype_rules: dict = None, verbose: bool = False) -> dict:
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤–æ –≤—Å–µ—Ö DataFrame —Å —É—á–µ—Ç–æ–º —è–≤–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - dfs: —Å–ª–æ–≤–∞—Ä—å DataFrame'–æ–≤.
    - dtype_rules: —Å–ª–æ–≤–∞—Ä—å —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫ –∏ —Ü–µ–ª–µ–≤—ã–º–∏ —Ç–∏–ø–∞–º–∏. –ü—Ä–∏–º–µ—Ä: {'_id': 'str', '_city': 'category'}
    - verbose: –≤—ã–≤–æ–¥–∏—Ç—å –ª–∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è—Ö.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - –ö–æ—Ä—Ç–µ–∂ –∏–∑:
        - –°–ª–æ–≤–∞—Ä—å —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ DataFrame.
        - –°–ª–æ–≤–∞—Ä—å —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –æ—Ç—á–µ—Ç–∞–º–∏.
    """
    
    # –ï—Å–ª–∏ dtype_rules –Ω–µ –∑–∞–¥–∞–Ω, —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
    dtype_rules = dtype_rules or {}
    reports = {}
    total_memory_saved = 0

    for df_name, df in dfs.items():
        original_memory = df.memory_usage(deep=True).sum()
        optimized_df = df.copy()
        type_changes = []

        for col in optimized_df.columns:
            col_data = optimized_df[col]
            original_type = col_data.dtype

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥—É–ª—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
            rule_applied = False
            for pattern, target_dtype in dtype_rules.items():
                if pattern in col:
                    try:
                        if target_dtype == 'datetime':
                            optimized_df[col] = pd.to_datetime(col_data, errors='coerce')
                        else:
                            optimized_df[col] = col_data.astype(target_dtype)
                        log_change(col, original_type, optimized_df[col].dtype, type_changes, verbose)
                        rule_applied = True
                    except Exception as e:
                        if verbose:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è {col} –≤ {target_dtype}: {e}")
                    break  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ

            if rule_applied:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫—É

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
            if 'date' in col.lower() or 'time' in col.lower() or 'timestamp' in col.lower():
                optimized_df[col] = pd.to_datetime(col_data, errors='coerce')
                log_change(col, original_type, optimized_df[col].dtype, type_changes, verbose)
            elif pd.api.types.is_numeric_dtype(col_data):
                optimized_df[col] = optimize_numeric_type(col_data)
                log_change(col, original_type, optimized_df[col].dtype, type_changes, verbose)
            elif pd.api.types.is_object_dtype(col_data):
                optimized_df[col] = optimize_categorical_type(col_data)
                log_change(col, original_type, optimized_df[col].dtype, type_changes, verbose)

        # --- –û—Ç—á—ë—Ç –ø–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º—É ---
        new_memory = optimized_df.memory_usage(deep=True).sum()
        memory_diff = original_memory - new_memory
        total_memory_saved += memory_diff
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        reports[df_name] = {
            'dataframe': optimized_df,
            'report': {
                'original_memory': original_memory,
                'optimized_memory': new_memory,
                'memory_saved': memory_diff,
                'type_changes': type_changes,
                'columns': len(optimized_df.columns),
                'rows': len(optimized_df)
            }
        }
        # –í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞
        print_report(df_name, reports[df_name]['report'])

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
    total_original_memory = sum([df.memory_usage(deep=True).sum() for df in dfs.values()])
    print(f"\nüèÅ –ò—Ç–æ–≥–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è –ø–∞–º—è—Ç–∏ –ø–æ –≤—Å–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞–º: {total_memory_saved / 1024**2:.2f} MB "
          f"({(total_memory_saved / total_original_memory) * 100:.1f}%)")

    return {k: v['dataframe'] for k, v in reports.items()}, reports


def log_change(col: str, old_type, new_type, changes: list, verbose: bool):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö."""
    if old_type != new_type:
        changes.append({
            'column': col,
            'old_type': str(old_type),
            'new_type': str(new_type)
        })


def optimize_numeric_type(col_data: pd.Series) -> pd.Series:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ–≤—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö."""
    # –ï—Å–ª–∏ –±–∏–Ω–∞—Ä–Ω—ã–µ (0 –∏–ª–∏ 1)
    if col_data.dropna().isin([0, 1]).all():
        return col_data.astype('boolean')
    
    # –ï—Å–ª–∏ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–ª—ã–µ (–≤–∫–ª—é—á–∞—è float, –Ω–æ –±–µ–∑ –¥—Ä–æ–±–µ–π)
    is_all_integer = (
        pd.api.types.is_integer_dtype(col_data) or
        (pd.api.types.is_float_dtype(col_data) and
         (col_data.dropna() % 1 == 0).all())
    )

    return pd.to_numeric(
        col_data,
        downcast='integer' if is_all_integer else 'float'
    )



def optimize_categorical_type(col_data: pd.Series) -> pd.Series:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."""
    nunique = col_data.nunique()
    if 1 < nunique < len(col_data) // 2:
        return col_data.astype('category')
    return col_data


def print_report(df_name: str, report: dict):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º tabulate."""
    print(f"\nüìä –û—Ç—á–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è: {df_name}")
    
    # –¢–∞–±–ª–∏—Ü–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç–∏–ø–æ–≤
    if report['type_changes']:
        print("\nüîÄ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö:")
        print(tabulate(
            report['type_changes'],
            headers={'column': '–ü—Ä–∏–∑–Ω–∞–∫', 'old_type': '–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–∏–ø', 'new_type': '–ù–æ–≤—ã–π —Ç–∏–ø'},
            tablefmt='Pretty_Table',
            stralign='left'
        ))
    else:
        print("\n‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏
    mem_table = [
        ["–ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä", f"{report['original_memory'] / 1024**2:.2f} MB"],
        ["–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä", f"{report['optimized_memory'] / 1024**2:.2f} MB"],
        ["–≠–∫–æ–Ω–æ–º–∏—è –ø–∞–º—è—Ç–∏", f"{report['memory_saved'] / 1024**2:.2f} MB" 
        f"({report['memory_saved'] /report['original_memory']:.1%})"]
    ]
    print("\nüíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏:")
    print(tabulate(mem_table, tablefmt='Pretty_Table'))
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 #   print(f"\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ")
 #   print(f"‚Ä¢ –ö–æ–ª–æ–Ω–æ–∫: {report['columns']}")
 #   print(f"‚Ä¢ –°—Ç—Ä–æ–∫: {report['rows']}")
 #   print(f"‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–ª–æ–Ω–æ–∫: {len(report['type_changes'])}")
    print("=" * 125)
