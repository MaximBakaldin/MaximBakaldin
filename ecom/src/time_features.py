# src/time_features.py

import pandas as pd
import numpy as np
import missingno as msno
from tabulate import tabulate
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import chi2_contingency, f_oneway
from sklearn.experimental import enable_iterative_imputer
from sklearn.impute import IterativeImputer
from sklearn.linear_model import LinearRegression
import logging

def time_series_eda(df_dict, time_freq='W', figsize=(12, 4), palette='Set2', save_plots=False):
    """
    –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç—Ä–µ–Ω–¥–æ–≤:
    - üìà –†–æ—Å—Ç: –∑–µ–ª–µ–Ω—ã–π
    - üìâ –ü–∞–¥–µ–Ω–∏–µ: –∫—Ä–∞—Å–Ω—ã–π
    - ‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: —Å–∏–Ω–∏–π
    """

    def analyze_table(name, df):
        datetime_cols = df.select_dtypes(include=['datetime']).columns
        if len(datetime_cols) == 0:
            return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫

        print(f"\n{'='*125}\n–ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {name.upper()}")

        date_col = datetime_cols[0]
        df = df.dropna(subset=[date_col])
        start_date, end_date = df[date_col].min(), df[date_col].max()

        print(f"üìÖ –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è '{date_col}':\n   –ù–∞—á–∞–ª–æ: {start_date}\n   –ö–æ–Ω–µ—Ü:  {end_date}")

        # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        ts = df.resample(time_freq, on=date_col).agg({date_col: 'count'}).rename(columns={date_col: 'metric'})
        full_range = pd.date_range(start=start_date, end=end_date, freq=time_freq)
        missing_periods = full_range.difference(ts.index)

        print(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∏: {len(missing_periods)} –ø–µ—Ä–∏–æ–¥–æ–≤.")

        if len(ts) < 2:
            print("üìâ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–µ–∫ –¥–ª—è —Ç—Ä–µ–Ω–¥–∞.")
            return

        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
        trend_data = ts.reset_index().rename(columns={ts.index.name or 'index': 'timestamp'})
        trend_data['days'] = (trend_data['timestamp'] - trend_data['timestamp'].min()).dt.days
        X, y = trend_data[['days']], trend_data['metric'].values

        reg = LinearRegression().fit(X, y)
        slope = reg.coef_[0]
        trend_pred = reg.predict(X)

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏ —Ü–≤–µ—Ç–∞ —Ç—Ä–µ–Ω–¥–∞
        if slope > 0.05:
            trend_label = 'üìà –†–æ—Å—Ç'
            trend_color = '#7eb170'  # –ó–µ–ª–µ–Ω—ã–π
        elif slope < -0.05:
            trend_label = 'üìâ –ü–∞–¥–µ–Ω–∏–µ'
            trend_color = '#e64e36'  # –ö—Ä–∞—Å–Ω—ã–π
        else:
            trend_label = '‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å'
            trend_color = '#3498db'  # –°–∏–Ω–∏–π

        print(f"‚Üí –¢—Ä–µ–Ω–¥: {trend_label} (–Ω–∞–∫–ª–æ–Ω = {slope:.2f})")

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        plt.figure(figsize=figsize)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –≤ numpy array –ø–µ—Ä–µ–¥ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ–º
        timestamps = np.array(trend_data['timestamp'])
        
        # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        sns.lineplot(x=timestamps, y=trend_data['metric'], 
                    label='–§–∞–∫—Ç', color='grey', linewidth=2.5)
        
        # –õ–∏–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
        plt.plot(timestamps, trend_pred, '--', 
                color=trend_color, linewidth=2.5, alpha=0.8,
                label=f'–¢—Ä–µ–Ω–¥ ({trend_label})')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        plt.title(f"–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ ‚Äî {name}\n–ß–∞—Å—Ç–æ—Ç–∞: {time_freq}", pad=20)
        plt.xlabel('–î–∞—Ç–∞', labelpad=10)
        plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π', labelpad=10)
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–µ–≥–µ–Ω–¥–∞
        legend = plt.legend(frameon=False, framealpha=0.9)
        legend.get_frame().set_edgecolor('#bdc3c7')
        
        # –°–µ—Ç–∫–∞ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
        plt.grid(axis='y', linestyle='--', alpha=0.4)
        sns.despine()
        plt.tight_layout()

        if save_plots:
            plt.savefig(f"time_series_{name}_{time_freq}.png", dpi=120, bbox_inches='tight')
            plt.close()
        else:
            plt.show()

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã
        print("\nüìù –ê–≤—Ç–æ–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:")
        if slope > 0.1:
            print(f" - üü¢ –°–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç ({slope:.2f} –µ–¥./–ø–µ—Ä–∏–æ–¥)")
        elif slope < -0.1:
            print(f" - üî¥ –°–∏–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ ({abs(slope):.2f} –µ–¥./–ø–µ—Ä–∏–æ–¥)")
        
        if np.std(y) > 0.3 * np.mean(y):
            print(" - üîÑ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è –≤–æ–∫—Ä—É–≥ —Ç—Ä–µ–Ω–¥–∞")
            
        if len(missing_periods) > 0:
            print(f" - ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã: {len(missing_periods)}")
            
        if trend_data['timestamp'].dt.month.value_counts().std() > 2:
            print(" - üå¶Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –º–µ—Å—è—á–Ω–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    for name, df in df_dict.items():
        analyze_table(name, df)

    print("\nüèÅ –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!")