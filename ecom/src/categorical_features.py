#src.categorical_features.py

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from tabulate import tabulate

def analyze_categorical_features(
    df_dict,
    top_n=5,
    max_cardinality=30,
    figsize=(8, 4),
    palette='viridis',
    exclude_tables=None,
    exclude_columns=None
):
    """
    –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:
    - –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (—Ç–æ–ø-N –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
    - –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –≤ grid-—Ñ–æ—Ä–º–∞—Ç–µ
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    """
    if exclude_tables is None:
        exclude_tables = []
    if exclude_columns is None:
        exclude_columns = []

    analysis_report = {}

    for table_name, df in df_dict.items():
        if table_name in exclude_tables:
            continue

        # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        cat_cols = [
            col for col in df.select_dtypes(include=['object', 'category', 'string']).columns
            if (df[col].nunique() <= max_cardinality) and (col not in exclude_columns)
        ]

        if not cat_cols:
            print(f"\n{'='*125}\n–í —Ç–∞–±–ª–∏—Ü–µ {table_name.upper()} –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤\n")
            continue

        print(f"\n{'='*125}\n–ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {table_name.upper()}\n")
        
        for col in cat_cols:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            counts = df[col].value_counts(dropna=False)
            counts_sorted = counts.sort_values(ascending=False).head(top_n)
            total = len(df)
            percentages = (counts_sorted / total * 100).round(1)
            na_count = df[col].isna().sum()
            na_percent = na_count / total * 100
            dominant_pct = percentages.iloc[0] if len(percentages) > 0 else 0

            # 1. –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            plt.figure(figsize=figsize)
            ax = sns.barplot(
                x=counts_sorted.values,
                y=counts_sorted.index,
                palette=palette,
                orient='h',
                order=counts_sorted.index
            )
            
            # –ü–æ–¥–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω–∏–π
            max_val = counts_sorted.max()
            for i, (val, pct) in enumerate(zip(counts_sorted, percentages)):
                ax.text(
                    x=val + (0.01 * max_val),
                    y=i,
                    s=f"{val:,} ({pct}%)",
                    va='center',
                    ha='left',
                    fontsize=10
                )
            
            ax.set_title(f"–¢–æ–ø-{top_n} –∫–∞—Ç–µ–≥–æ—Ä–∏–π - {col} ", fontsize=12, pad=20)
            ax.set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
            ax.set_ylabel('')
            ax.xaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: f"{x:,.0f}"))
            sns.despine()
            plt.tight_layout()
            plt.show()

            # 2. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            recommendations = []
            if dominant_pct > 50:
                recommendations.append("‚ö†Ô∏è –î–∏—Å–±–∞–ª–∞–Ω—Å (>50%)")
            if na_percent > 5:
                recommendations.append(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∏ {na_percent:.1f}%")
            
            table_data = [[
                col,
                f"{len(counts):,}",
                f"{na_count:,} ({na_percent:.1f}%)",
                f"{counts_sorted.index[0]} ({percentages.iloc[0]:.1f}%)",
                ", ".join(recommendations) if recommendations else "üü¢ –ù–æ—Ä–º–∞"
            ]]
            
            # 3. –í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã –≤ grid-—Ñ–æ—Ä–º–∞—Ç–µ (–∫–∞–∫ –≤—ã –ø—Ä–æ—Å–∏–ª–∏)
            print(tabulate(
                table_data,
                headers=["–ö–æ–ª–æ–Ω–∫–∞", "–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ", "–ü—Ä–æ–ø—É—Å–∫–∏", "–¢–æ–ø-1 –∫–∞—Ç–µ–≥–æ—Ä–∏—è", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"],
                tablefmt="simple",
                stralign="left",
                numalign="left"
            ))
            print()

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –æ—Ç—á–µ—Ç
            analysis_report.setdefault(table_name, {})[col] = {
                'total': total,
                'unique': len(counts),
                'missing': (na_count, na_percent),
                'top_values': counts_sorted.head(5).to_dict(),
                'recommendations': recommendations
            }

    print("\nüèÅ –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    return analysis_report